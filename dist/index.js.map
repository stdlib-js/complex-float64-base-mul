{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/assign.js", "../lib/strided.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Complex128 = require( '@stdlib/complex-float64-ctor' );\nvar real = require( '@stdlib/complex-float64-real' );\nvar imag = require( '@stdlib/complex-float64-imag' );\n\n\n// MAIN //\n\n/**\n* Multiplies two double-precision complex floating-point numbers.\n*\n* @param {Complex128} z1 - complex number\n* @param {Complex128} z2 - complex number\n* @returns {Complex128} result\n*\n* @example\n* var Complex128 = require( '@stdlib/complex-float64-ctor' );\n* var real = require( '@stdlib/complex-float64-real' );\n* var imag = require( '@stdlib/complex-float64-imag' );\n*\n* var z1 = new Complex128( 5.0, 3.0 );\n* // returns <Complex128>\n*\n* var z2 = new Complex128( -2.0, 1.0 );\n* // returns <Complex128>\n*\n* var out = mul( z1, z2 );\n* // returns <Complex128>\n*\n* var re = real( out );\n* // returns -13.0\n*\n* var im = imag( out );\n* // returns -1.0\n*/\nfunction mul( z1, z2 ) {\n\tvar re1 = real( z1 );\n\tvar re2 = real( z2 );\n\tvar im1 = imag( z1 );\n\tvar im2 = imag( z2 );\n\tvar re = (re1*re2) - (im1*im2);\n\tvar im = (re1*im2) + (im1*re2);\n\treturn new Complex128( re, im );\n}\n\n\n// EXPORTS //\n\nmodule.exports = mul;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Multiplies two double-precision complex floating-point numbers and assigns results to a provided output array.\n*\n* @param {number} re1 - real component of the first complex number\n* @param {number} im1 - imaginary component of the first complex number\n* @param {number} re2 - real component of the second complex number\n* @param {number} im2 - imaginary component of the second complex number\n* @param {Collection} out - output array\n* @param {integer} strideOut - stride length\n* @param {NonNegativeInteger} offsetOut - starting index\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var out = assign( 5.0, 3.0, -2.0, 1.0, new Float64Array( 2 ), 1, 0 );\n* // returns <Float64Array>[ -13.0, -1.0 ]\n*/\nfunction assign( re1, im1, re2, im2, out, strideOut, offsetOut ) {\n\tout[ offsetOut ] = (re1*re2) - (im1*im2);\n\tout[ offsetOut+strideOut ] = (re1*im2) + (im1*re2);\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = assign;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Multiplies two double-precision complex floating-point numbers stored in real-valued strided array views and assigns results to a provided strided output array.\n*\n* @param {Float64Array} z1 - first complex number view\n* @param {integer} strideZ1 - stride length for `z1`\n* @param {NonNegativeInteger} offsetZ1 - starting index for `z1`\n* @param {Float64Array} z2 - second complex number view\n* @param {integer} strideZ2 - stride length for `z2`\n* @param {NonNegativeInteger} offsetZ2 - starting index for `z2`\n* @param {Collection} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var z1 = new Float64Array( [ 5.0, 3.0 ] );\n* var z2 = new Float64Array( [ -2.0, 1.0 ] );\n*\n* var out = strided( z1, 1, 0, z2, 1, 0, new Float64Array( 2 ), 1, 0 );\n* // returns <Float64Array>[ -13.0, -1.0 ]\n*/\nfunction strided( z1, strideZ1, offsetZ1, z2, strideZ2, offsetZ2, out, strideOut, offsetOut ) { // eslint-disable-line max-len\n\tvar re1 = z1[ offsetZ1 ];\n\tvar im1 = z1[ offsetZ1+strideZ1 ];\n\tvar re2 = z2[ offsetZ2 ];\n\tvar im2 = z2[ offsetZ2+strideZ2 ];\n\tout[ offsetOut ] = (re1*re2) - (im1*im2);\n\tout[ offsetOut+strideOut ] = (re1*im2) + (im1*re2);\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = strided;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Multiply two double-precision complex floating-point numbers.\n*\n* @module @stdlib/complex-float64-base-mul\n*\n* @example\n* var Complex128 = require( '@stdlib/complex-float64-ctor' );\n* var real = require( '@stdlib/complex-float64-real' );\n* var imag = require( '@stdlib/complex-float64-imag' );\n* var mul = require( '@stdlib/complex-float64-base-mul' );\n*\n* var z1 = new Complex128( 5.0, 3.0 );\n* // returns <Complex128>\n*\n* var z2 = new Complex128( -2.0, 1.0 );\n* // returns <Complex128>\n*\n* var out = mul( z1, z2 );\n* // returns <Complex128>\n*\n* var re = real( out );\n* // returns -13.0\n*\n* var im = imag( out );\n* // returns -1.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar assign = require( './assign.js' );\nvar strided = require( './strided.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\nsetReadOnly( main, 'strided', strided );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"assign\": \"main.assign\", \"strided\": \"main.strided\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAa,QAAS,8BAA+B,EACrDC,EAAO,QAAS,8BAA+B,EAC/CC,EAAO,QAAS,8BAA+B,EAgCnD,SAASC,EAAKC,EAAIC,EAAK,CACtB,IAAIC,EAAML,EAAMG,CAAG,EACfG,EAAMN,EAAMI,CAAG,EACfG,EAAMN,EAAME,CAAG,EACfK,EAAMP,EAAMG,CAAG,EACfK,EAAMJ,EAAIC,EAAQC,EAAIC,EACtBE,EAAML,EAAIG,EAAQD,EAAID,EAC1B,OAAO,IAAIP,EAAYU,EAAIC,CAAG,CAC/B,CAKAZ,EAAO,QAAUI,ICrEjB,IAAAS,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAwCA,SAASC,EAAQC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAWC,EAAY,CAChE,OAAAF,EAAKE,CAAU,EAAKN,EAAIE,EAAQD,EAAIE,EACpCC,EAAKE,EAAUD,CAAU,EAAKL,EAAIG,EAAQF,EAAIC,EACvCE,CACR,CAKAN,EAAO,QAAUC,ICjDjB,IAAAQ,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cA6CA,SAASC,EAASC,EAAIC,EAAUC,EAAUC,EAAIC,EAAUC,EAAUC,EAAKC,EAAWC,EAAY,CAC7F,IAAIC,EAAMT,EAAIE,CAAS,EACnBQ,EAAMV,EAAIE,EAASD,CAAS,EAC5BU,EAAMR,EAAIE,CAAS,EACnBO,EAAMT,EAAIE,EAASD,CAAS,EAChC,OAAAE,EAAKE,CAAU,EAAKC,EAAIE,EAAQD,EAAIE,EACpCN,EAAKE,EAAUD,CAAU,EAAKE,EAAIG,EAAQF,EAAIC,EACvCL,CACR,CAKAR,EAAO,QAAUC,ICTjB,IAAIc,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAS,IACTC,EAAU,IAKdH,EAAaC,EAAM,SAAUC,CAAO,EACpCF,EAAaC,EAAM,UAAWE,CAAQ,EAKtC,OAAO,QAAUF",
  "names": ["require_main", "__commonJSMin", "exports", "module", "Complex128", "real", "imag", "mul", "z1", "z2", "re1", "re2", "im1", "im2", "re", "im", "require_assign", "__commonJSMin", "exports", "module", "assign", "re1", "im1", "re2", "im2", "out", "strideOut", "offsetOut", "require_strided", "__commonJSMin", "exports", "module", "strided", "z1", "strideZ1", "offsetZ1", "z2", "strideZ2", "offsetZ2", "out", "strideOut", "offsetOut", "re1", "im1", "re2", "im2", "setReadOnly", "main", "assign", "strided"]
}
